<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>九洲的博客</title>
  
  
  <link href="https://longeblog.github.io/atom.xml" rel="self"/>
  
  <link href="https://longeblog.github.io/"/>
  <updated>2021-08-28T18:39:50.527Z</updated>
  <id>https://longeblog.github.io/</id>
  
  <author>
    <name>九洲</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>php之依赖注入和IOC的学习</title>
    <link href="https://longeblog.github.io/2021/08/29/PHP%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E5%92%8CIOC%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>https://longeblog.github.io/2021/08/29/PHP%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E5%92%8CIOC%E7%9A%84%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-08-28T18:34:02.000Z</published>
    <updated>2021-08-28T18:39:50.527Z</updated>
    
    <content type="html"><![CDATA[<h4><span id="php依赖注入和控制反转简称di和ioc">PHP依赖注入和控制反转（简称DI和IOC）</span></h4><p>依赖注入是一种去除类与类依赖关系的设计模式，实现程序之间的低耦合，下面我们就来学习一下它。</p><p>一、<strong>初识类的依赖</strong><br>假设有两个类(ClassA,ClassB) Class A 中，有 Class B 的实例，则称 Class A 对 Class B 有一个依赖，也就是说<strong>类A的依赖就是类B</strong>，下面我们来看代码</p>   <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line">     <span class="keyword">protected</span> <span class="variable">$B</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="comment">// 主动(实例化类B),类的实例化由程序员控制</span></span><br><span class="line">         <span class="keyword">$this</span>-&gt;B = <span class="keyword">new</span> B(); </span><br><span class="line">     &#125;       </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>经仔细分析，发现这段依赖注入的demo存在一些问题</p><ol><li>如果ClassB的构造参数发生改变，例如 new B($name) ，因为new B（）被写死了，所以我们需要修改ClassA的代码，这样很不便于程序的维护</li><li>试想一下，如果程序中出现都以这种方式来编写代码的化，如果类A的依赖不仅仅是类B，而是10个或20个类并且他们的代码都发生改变的时候，这样是不是就很不利于我们代码的修改啊，会显得特别的繁琐</li><li>所以我们就需要使用依赖注入的方式来解决这种问题</li></ol><p>二、 <strong>使用依赖注入的好处</strong><br>依赖注入（di）不需要直接new来获得这个对象，而是作为外部参数传入的方式，或者相关的容器来控制，简单理解，就是把创建对象的工作，交给容器来做即可，不需要我们手动创建对象。</p>   <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">  </span>&#123;</span><br><span class="line">      <span class="keyword">protected</span> <span class="variable">$B</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 把类B作为构造函数的参数传递过来</span></span><br><span class="line">      <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">B <span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">$this</span>-&gt;B = <span class="variable">$b</span>;</span><br><span class="line">      &#125; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 需要先对ClassB进行实例化，这样就达到依赖注入的目的</span></span><br><span class="line">  <span class="keyword">new</span> A( <span class="keyword">new</span> B());</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>依赖注入的优点</p><ol><li>实现代码之间松耦合，提高代码可维护性</li><li>ClassB先实例化后在传递到ClassA，这样当ClassB构造方式发生改变的时候，我们不需要修改ClassA的代码，只需要在把修改的方式告诉容器就可以了。</li></ol><p>三、依赖注入容器<br>依赖注入demo.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="keyword">__METHOD__</span>;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$bar</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Bar <span class="variable">$bar</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;bar = <span class="variable">$bar</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;bar-&gt;doSomething();</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__METHOD__</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>容器demo.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&quot;di.php&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ioc</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="variable">$registry</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      print_r(<span class="built_in">static</span>::<span class="variable">$registry</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params"><span class="variable">$name</span>, <span class="keyword">Callable</span> <span class="variable">$resolver</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">static</span>::<span class="variable">$registry</span>[<span class="variable">$name</span>] = <span class="variable">$resolver</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="built_in">static</span>::<span class="variable">$registry</span>[<span class="variable">$name</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$resolver</span> = <span class="built_in">static</span>::<span class="variable">$registry</span>[<span class="variable">$name</span>];</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$resolver</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把对象绑定到容器内</span></span><br><span class="line">Ioc::bind(<span class="string">&#x27;bar&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Bar();</span><br><span class="line">&#125;);</span><br><span class="line">Ioc::bind(<span class="string">&#x27;foo&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Foo(Ioc::make(<span class="string">&#x27;bar&#x27;</span>));</span><br><span class="line">  <span class="comment">//效果跟上面是一样的 return new Foo(new Bar());</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从容器中获取对象</span></span><br><span class="line"><span class="variable">$foo</span> = Ioc::make(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="variable">$foo</span>-&gt;doSomething();</span><br></pre></td></tr></table></figure><ol><li>使用容器来管理依赖注入，利用第三方容器的方式来实现松耦合，提升代码的维护性</li><li>利用容器来创建对象，在后续的开发中我们可以使用依赖注入从容器中获取对象。目前先到这把。待继续更新</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4&gt;&lt;span id=&quot;php依赖注入和控制反转简称di和ioc&quot;&gt;PHP依赖注入和控制反转（简称DI和IOC）&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;依赖注入是一种去除类与类依赖关系的设计模式，实现程序之间的低耦合，下面我们就来学习一下它。&lt;/p&gt;
&lt;p&gt;一、&lt;strong&gt;初识类的</summary>
      
    
    
    
    
    <category term="PHP框架" scheme="https://longeblog.github.io/tags/PHP%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
</feed>
